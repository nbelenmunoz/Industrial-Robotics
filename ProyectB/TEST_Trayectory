% TEST SCARA with Additional Degrees of Freedom
% Script to test the direct and inverse kinematic problem for a SCARA robot
clc; clear all; close all;

l1 = 300;  
l2 = 200;  
l3 = 160;  
L = [l1; l2; l3];  


% Initial and final TCP positions and orientations
Si = [-400; -100; 150; pi];       %[X; Y; Z; phi]
Sf = [-600; -10; 150; pi];     
Ds = Sf - Si;                   

Fx = 10; Fy = 10; Fz = 0; Mphi = 0;
Fs = [Fx; Fy; Fz; Mphi];        

tx1 = 3; tx2 = 6; tx3 = 9;      
ty1 = 1; ty2 = 8; ty3 = 9;     
t3 = tx3;                      

% Generate trajectory parameters
Six = Si(1); dSx = Ds(1);
Siy = Si(2); dSy = Ds(2);
dPhi = Ds(4);                   % Change in orientation phi

figure(1)
PlotAreaSCARA3DOF(L, 1);           
hold on

% Initialize variables
i = 1;
Z = Si(3);                      
Z_dot = 0;                      
Z_ddot = 0;                     

for t = 0:0.1:t3
    resx = Sshape(t, Six, dSx, tx1, tx2, tx3);
    resy = Sshape(t, Siy, dSy, ty1, ty2, ty3);
    
    % Orientation
    phi_t = Si(4) + (Sf(4) - Si(4)) * (t / t3); 
    phi_dot = (Sf(4) - Si(4)) / t3;             
    phi_ddot = 0;                               
    
    S = [resx.pos; resy.pos; Z; phi_t];        
    Sp = [resx.vel; resy.vel; Z_dot; phi_dot]; 
    Spp = [resx.acc; resy.acc; Z_ddot; phi_ddot]; 
    
    Q1 = SCARAinv3DOF(S, L, 1);  % Use SCARAinv
    
    J = SCARAjac3DOF(Q1, L); 
    Q1p = inv(J) * Sp;    
    Jp = SCARAjacP3DOF(Q1, Q1p, L);  
    Q1pp = inv(J) * (Spp - Jp * Q1p);  

    Fq(i, :) = -(J') * Fs;  % Joint torques/forces
    

    PlotScara3DOF(Q1(1:3), L, 'r', 1);  % Use PlotScara


    time(i) = t;
    px(i) = resx.pos;   vx(i) = resx.vel;   ax(i) = resx.acc;
    py(i) = resy.pos;   vy(i) = resy.vel;   ay(i) = resy.acc;
    q1(i) = Q1(1); q1p(i) = Q1p(1); q1pp(i) = Q1pp(1);
    q2(i) = Q1(2); q2p(i) = Q1p(2); q2pp(i) = Q1pp(2);
    q3(i) = Q1(3); q3p(i) = Q1p(3); q3pp(i) = Q1pp(3);
    d4(i) = Q1(4); d4p(i) = Q1p(4); d4pp(i) = Q1pp(4);
    i = i + 1;
end

% Plot the end-effector trajectory
figure;
plot(px, py, 'b-', 'LineWidth', 2); grid on;
xlabel('X Position (mm)');
ylabel('Y Position (mm)');
title('End-Effector Trajectory');


% Plot joint torques/forces
figure;
plot(time, Fq(:,1), 'b-', time, Fq(:,2), 'r--', time, Fq(:,3), 'g-.', time, Fq(:,4), 'k:'); grid on;
xlabel('Time (s)');
ylabel('Joint Torques/Forces');
title('Joint Torques and Forces');
legend('Torque 1', 'Torque 2', 'Torque 3', 'Force on Prismatic Joint');

hold off;
